[{"content":"Summary: in this tutorial, you will learn how to connect to an SQLite database from Node.js applications.\nInstalling sqlite3 module To interact with the SQLite database, you need to download and install sqlite3 module. You can use npm to do so using the following command:\n\u0026gt; npm install sqlite3 After installing the sqlite3 module, you are ready to connect to a SQLite database from a Node.js application.\n@types도 같이 깔자.\n\u0026gt; npm install --save-dev @types/sqlite3 To connect to an SQLite database, you need to:\n First, import the sqlite3 module Second, call the Database() function of the sqlite3 module and pass the database information such as database file, opening mode, and a callback function.  Connecting to the in-memory database To open a database connection to an in-memory database, you use the following steps.\nFirst, import the sqlite3 module:\nconst sqlite3 = require(\u0026#39;sqlite3\u0026#39;).verbose(); Notice that the execution mode is set to verbose to produce long stack traces.\nSecond, create a Database object:\nlet db = new sqlite3.Database(\u0026#39;:memory:\u0026#39;); The sqlite3.Database() returns a Database object and opens the database connection automatically.\nThe sqlite3.Database() accepts a callback function that will be called when the database opened successfully or when an error occurred.\nThe callback function has the error object as the first parameter. If an error occurred, the error object is not null, otherwise, it is null.\nIf you don’t provide the callback function and an error occurred during opening the database, an error event will be emitted. In case the database is opened successfully, the open event is emitted regardless of whether a callback is provided or not.\nSo you now can open an SQLite database and provide the detailed information if an error occurred as follows:\nlet db = new sqlite3.Database(\u0026#39;:memory:\u0026#39;, (err) =\u0026gt; { if (err) { return console.error(err.message); } console.log(\u0026#39;Connected to the in-memory SQlite database.\u0026#39;); }); It is a good practice to close a database connection when you are done with it. To close a database connection, you call the close() method of the Database object as follows:\ndb.close(); The close() method will wait for all pending queries completed before actually closing the database.\nSimilar to the Database(), the close() method also accepts a callback that indicates whether an error occurred during closing the database connection.\ndb.close((err) =\u0026gt; { if (err) { return console.error(err.message); } console.log(\u0026#39;Close the database connection.\u0026#39;); }); The following illustrates the complete code for opening and closing an in-memory SQLite database:\nconst sqlite3 = require(\u0026#39;sqlite3\u0026#39;).verbose(); // open database in memory let db = new sqlite3.Database(\u0026#39;:memory:\u0026#39;, (err) =\u0026gt; { if (err) { return console.error(err.message); } console.log(\u0026#39;Connected to the in-memory SQlite database.\u0026#39;); }); // close the database connection db.close((err) =\u0026gt; { if (err) { return console.error(err.message); } console.log(\u0026#39;Close the database connection.\u0026#39;); }); Let’s run the program to see how it works.\n\u0026gt; node connect.js Connected to the in-memory SQlite database. Close the database connection. As you can see, it works perfectly as expected.\nConnecting to a disk file database To connect to a disk file database, instead of passing the ':memory:' string, you pass the path to the database file.\nFor example, to connect to the chinook database file stored in the db folder, you use the following statement:\nlet db = new sqlite3.Database(\u0026#39;./db/chinook.db\u0026#39;, (err) =\u0026gt; { if (err) { console.error(err.message); } console.log(\u0026#39;Connected to the chinook database.\u0026#39;); }); There are three opening modes:\n sqlite3.OPEN_READONLY: open the database for read-only. sqlite3.OPEN_READWRITE : open the database for reading and writting. sqlite3.OPEN_CREATE: open the database, if the database does not exist, create a new database.  The sqlite3.Database() accepts one or more mode as the second argument. By default, it uses the OPEN_READWRITE | OPEN_CREATE mode. It means that if the database does not exist, the new database will be created and is ready for read and write.\nTo open the chinook sample database for read and write, you can do it as follows:\nlet db = new sqlite3.Database(\u0026#39;./db/chinook.db\u0026#39;, sqlite3.OPEN_READWRITE, (err) =\u0026gt; { if (err) { console.error(err.message); } console.log(\u0026#39;Connected to the chinook database.\u0026#39;); }); The following example shows the complete code for opening the chinook database, querying data from the playlists table, and closing the database connection.\nconst sqlite3 = require(\u0026#39;sqlite3\u0026#39;).verbose(); // open the database let db = new sqlite3.Database(\u0026#39;./db/chinook.db\u0026#39;, sqlite3.OPEN_READWRITE, (err) =\u0026gt; { if (err) { console.error(err.message); } console.log(\u0026#39;Connected to the chinook database.\u0026#39;); }); db.serialize(() =\u0026gt; { db.each(`SELECT PlaylistId as id, Name as name FROM playlists`, (err, row) =\u0026gt; { if (err) { console.error(err.message); } console.log(row.id + \u0026#34;\\t\u0026#34; + row.name); }); }); db.close((err) =\u0026gt; { if (err) { console.error(err.message); } console.log(\u0026#39;Close the database connection.\u0026#39;); }); Note that you will learn how to query data in the next tutorial.\nIn this tutorial, you have learned how to connect to an SQLite database either in-memory or disk file based database.\nSee Also  https://www.sqlitetutorial.net/sqlite-nodejs/  ","permalink":"https://bynaki.github.io/posts/node.connecting-sqlite/","summary":"Summary: in this tutorial, you will learn how to connect to an SQLite database from Node.js applications.\nInstalling sqlite3 module To interact with the SQLite database, you need to download and install sqlite3 module. You can use npm to do so using the following command:\n\u0026gt; npm install sqlite3 After installing the sqlite3 module, you are ready to connect to a SQLite database from a Node.js application.\n@types도 같이 깔자.","title":"Node :: Connecting To SQLite Database Using Node.js"},{"content":"In this guide I will explain how to deploy a website to GitHub pages forcing HTTPS over a custom domain that is registered with AWS Route 53. We will set up our domain so that the www subdomain will redirect to the apex domain.\nSummary  Set up the GitHub repo Commit and push an index.html or use Jekyll Configure AWS Route 53  Step 1: Create GitHub repo and turn on GitHub Pages  If it does not exist yet, create a repository using the naming pattern your-github-username.github.io. Since my username is benwiz my repository is called benwiz.github.io . Click the Settings tab and scroll down the GitHub Pages section From the Source dropdown select master branch Click Save  Step 2: Push source code to GitHub  Clone the repo to your local machine  git clone git@github.com:your-github-username/your-github-username.github.io.git \u0026amp;\u0026amp; cd your-github-username.github.io  Create an index.html file with some content  echo \u0026quot;Hello GitHub Pages!\u0026quot; \u0026gt; index.html  Looking forward, we will need to have a file named CNAME that contains a single row: your custom domain. My CNAME file has the following contents.  benwiz.com  Push the files to GitHub  git add . \u0026amp;\u0026amp; git commit -m 'Create content and CNAME record' \u0026amp;\u0026amp; git push Step 3: Confirm that GitHub pages has been deployed Visit http://your-github-username.github.io and https://your-github-username.github.io. You should see the contents of your index.html file at both the unsecured and secured addresses.\nStep 4: Configure AWS Route 53 to use your custom vanity domain  Log into the AWS console and go to the Route 53 dashboard. Click Hosted zones Click the domain you would like to use Click Create Record Set Do not enter anything into the Name field Under the Type dropdown, select A — IPv4 addresses The Alias toggle should be set to No Enter the following four IP addresses into the value text area. Then click Save Record Set.  185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  Click Create Record Set, again Into the Name field, enter www Under the Type dropdown, select A — IPv4 addresses, again The Alias toggle should be set to Yes, unlike before In the Alias Target field, select the apex domain we previously set up. For me this is *benwiz.*com. Click Save Record Set, again  Step 5: Configure GitHub to serve over your custom domain  Return to your GitHub repository’s settings tab Scroll down to the GitHub Pages section In the Custom domain field enter your custom domain: your-custom-domain.com Click Save Check Enforce HTTPS  Step 6: Confirm that your page is accessible at your custom domain Visit https://your-custom-domain.com. You should see the contents of your index.html.\n Visit https://www.your-custom-domain.com. You should be redirected to https://your-custom-domain.com. Visit http://your-custom-domain.com. You should be redirected to https://your-custom-domain.com. Visit http://www.your-custom-domain.com. You should be redirected to https://your-custom-domain.com.  ","permalink":"https://bynaki.github.io/posts/aws.route53-github/","summary":"In this guide I will explain how to deploy a website to GitHub pages forcing HTTPS over a custom domain that is registered with AWS Route 53. We will set up our domain so that the www subdomain will redirect to the apex domain.\nSummary  Set up the GitHub repo Commit and push an index.html or use Jekyll Configure AWS Route 53  Step 1: Create GitHub repo and turn on GitHub Pages  If it does not exist yet, create a repository using the naming pattern your-github-username.","title":"AWS :: How to deploy GitHub pages with AWS Route 53 registered custom domain and force HTTPS"},{"content":"You can capture the entire screen, a window, or just a portion of the screen.\nHow to take a screenshot on your Mac  To take a screenshot, press and hold these three keys together: Shift, Command, and 3. If you see a thumbnail in the corner of your screen, click it to edit the screenshot. Or wait for the screenshot to save to your desktop.  How to capture a portion of the screen  Press and hold these three keys together: Shift, Command, and 4. Drag the crosshair to select the area of the screen to capture. To move the selection, press and hold Space bar while dragging. To cancel taking the screenshot, press the Esc (Escape) key.  To take the screenshot, release your mouse or trackpad button. If you see a thumbnail in the corner of your screen, click it to edit the screenshot. Or wait for the screenshot to save to your desktop.  How to capture a window or menu  Open the window or menu that you want to capture. Press and hold these keys together: Shift, Command, 4, and Space bar. The pointer changes to a camera icon . To cancel taking the screenshot, press the Esc (Escape) key.  Click the window or menu to capture it. To exclude the window\u0026rsquo;s shadow from the screenshot, press and hold the Option key while you click. If you see a thumbnail in the corner of your screen, click it to edit the screenshot. Or wait for the screenshot to save to your desktop.  Where to find screenshots By default, screenshots save to your desktop with the name ”Screen Shot [date] at [time].png.”\nIn macOS Mojave or later, you can change the default location of saved screenshots from the Options menu in the Screenshot app. You can also drag the thumbnail to a folder or document.\nLearn more  In macOS Mojave or later, you can also set a timer and choose where screenshots are saved with the Screenshot app. To open the app, press and hold these three keys together: Shift, Command, and 5. Learn more about the Screenshot app. Some apps, such as the Apple TV app, might not let you take screenshots of their windows. To copy a screenshot to the Clipboard, press and hold the Control key while you take the screenshot. You can then paste the screenshot somewhere else. Or use Universal Clipboard to paste it on another Apple device.  ","permalink":"https://bynaki.github.io/posts/mac.screenshot/","summary":"You can capture the entire screen, a window, or just a portion of the screen.\nHow to take a screenshot on your Mac  To take a screenshot, press and hold these three keys together: Shift, Command, and 3. If you see a thumbnail in the corner of your screen, click it to edit the screenshot. Or wait for the screenshot to save to your desktop.  How to capture a portion of the screen  Press and hold these three keys together: Shift, Command, and 4.","title":"Mac :: Take a screenshot on your Mac"},{"content":"Is there a quicker way of just updating all the dependencies, including major version changes? So, like npm update but for major version updates as well?\nYes, there is a tool called npm-check-updates that will do this. Just run the following command:\nnpx npm-check-updates -u This will update the dependencies to the latest versions (including major version changes) in the package.json file. If we are happy to go ahead with the upgrades we need to run the following command:\nnpm install This will then upgrade the packages in the node_modules folder, and the package-lock.json file will be updated as well.\n","permalink":"https://bynaki.github.io/posts/node.upgrading-npm/","summary":"Is there a quicker way of just updating all the dependencies, including major version changes? So, like npm update but for major version updates as well?\nYes, there is a tool called npm-check-updates that will do this. Just run the following command:\nnpx npm-check-updates -u This will update the dependencies to the latest versions (including major version changes) in the package.json file. If we are happy to go ahead with the upgrades we need to run the following command:","title":"Node :: Upgrading npm"},{"content":"오래된 프로젝트의 기본 branch가 master라면 main으로 바꾸어 보자.\n$ git checkout master # master branch로 이동 $ git branch -m master main # 로컬에서 master 이름을 main으로 변경 $ git fetch # 서버(Github)에서 최신 커밋을 가져옴 $ git branch --unset-upstream # origin/master와 연결 제거 $ git branch -u origin/main # origin/main과 연결 $ git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main # Default branch를 origin/main으로 업데이트 git int 할때 기본 branch를 main으로 하기 위한 config 설정.\n$ git config --global init.defaultBranch main ","permalink":"https://bynaki.github.io/posts/git.default-branch-main/","summary":"오래된 프로젝트의 기본 branch가 master라면 main으로 바꾸어 보자.\n$ git checkout master # master branch로 이동 $ git branch -m master main # 로컬에서 master 이름을 main으로 변경 $ git fetch # 서버(Github)에서 최신 커밋을 가져옴 $ git branch --unset-upstream # origin/master와 연결 제거 $ git branch -u origin/main # origin/main과 연결 $ git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/main # Default branch를 origin/main으로 업데이트 git int 할때 기본 branch를 main으로 하기 위한 config 설정.","title":"Git :: Default Branch를 'master'에서 'main'으로 변경"},{"content":"웹 폰트 또한 font-family 속성을 사용하지만, @font-face 지시어(directive)라는 CSS 명령어를 사용해서 웹 브라우저에게 해당 서체를 다운로드할 것을 알리면서 사용할 수 있습니다.\n웹 폰트를 위해 사용하는 CSS 코드는 매우 간단하며, 두 개의 CSS 명령어만이 필요합니다.\n @font-face 지시어는 웹 브라우저에게 서체 이름과 다운받을 위치를 알려줍니다. 이 명령어의 동작 방식은 뒤에서 살펴봅니다. font-family 속성의 사용법은 위에서 언급한 일반 폰트의 사용법과 같습니다. 일단 @font-face 를 사용해 브라우저에게 서체를 다운받으라 알린 다음에는, 어느 CSS에서도 일반 폰트와 동일하게 font-family를 통해 사용할 수 있게 됩니다.  Web Font Sysntax 웹 폰트의 마법은 @font-face 지시어라는 CSS 명령어부터 시작됩니다. 이 명령어는 사용할 폰트의 이름 및 해당 폰트를 다운받을 수 있는 위치를 브라우저에게 알리는 명령어입니다. 아래 코드에서 간단히 사용 방법을 살펴봅니다.\n@font-face { font-family: \u0026lt;a-remote-font-name\u0026gt; src: \u0026lt;source\u0026gt; [, \u0026lt;source\u0026gt;]*; [font-weight: \u0026lt;weight\u0026gt;]; [font-style: \u0026lt;style\u0026gt;]; } 속성값들의 내용은 아래와 같습니다.\n \u0026lt;a-remote-font-name\u0026gt; : font 속성에서 폰트명(font face)으로 지정될 이름을 설정한다. \u0026lt;source\u0026gt; : 원격 폰트(remote font) 파일의 위치를 나타내는 URL 값을 지정하거나, 사용자 컴퓨터에 설치된 폰트명을 local(\u0026ldquo;Font Name\u0026rdquo;)형식으로 지정하는 속성이다. \u0026lt;weight\u0026gt; : 폰트의 굵기(font weight) 값. \u0026lt;style\u0026gt; : 폰트 스타일(font style) 값.  Usage @font-face { font-family: \u0026#39;MaruBuri-Regular\u0026#39;; src: url(\u0026#39;https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_20-10-21@1.0/MaruBuri-Regular.woff\u0026#39;) format(\u0026#39;woff\u0026#39;); font-weight: normal; font-style: normal; } body { font-family:\u0026#39;나눔고딕\u0026#39;, \u0026#39;NanumGothic\u0026#39;, \u0026#39;MaruBuri-Regular\u0026#39;; } See Also  https://webclub.tistory.com/261 Google Fonts Adobe Fonts cufon 눈누 Font Squirrel (웹폰트 생성기) 이롭게 바탕체  ","permalink":"https://bynaki.github.io/posts/css.font-face/","summary":"웹 폰트 또한 font-family 속성을 사용하지만, @font-face 지시어(directive)라는 CSS 명령어를 사용해서 웹 브라우저에게 해당 서체를 다운로드할 것을 알리면서 사용할 수 있습니다.\n웹 폰트를 위해 사용하는 CSS 코드는 매우 간단하며, 두 개의 CSS 명령어만이 필요합니다.\n @font-face 지시어는 웹 브라우저에게 서체 이름과 다운받을 위치를 알려줍니다. 이 명령어의 동작 방식은 뒤에서 살펴봅니다. font-family 속성의 사용법은 위에서 언급한 일반 폰트의 사용법과 같습니다. 일단 @font-face 를 사용해 브라우저에게 서체를 다운받으라 알린 다음에는, 어느 CSS에서도 일반 폰트와 동일하게 font-family를 통해 사용할 수 있게 됩니다.","title":"CSS :: Web Font (@font-face)"},{"content":" hammerspoon은 macOS에서만 돌아가는 자동화 툴이다. Lua를 내장하고 있다. 마음에 든다.  What is Hammerspoon? This is a tool for powerful automation of OS X. At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting engine.\nWhat gives Hammerspoon its power is a set of extensions that expose specific pieces of system functionality, to the user. With these, you can write Lua scripts to control many aspects of your OS X environment.\nHow do I install it? Manually  Download the latest release Drag Hammerspoon.app from your Downloads folder to Applications  Homebrew  brew install hammerspoon --cask  사용법  ~/.hammerspoon/init.lua 코딩한다. 아래 메뉴에 Open Config를 선택해도 된다. 아래 메뉴에 Reload Config를 선택해 Reload 한다. Console 창을 보고 싶으면 아래 메뉴에 Console...을 선택한다.  What next? Out of the box, Hammerspoon does nothing - you will need to create ~/.hammerspoon/init.lua and fill it with useful code. There are several resources which can help you:\n Getting Started Guide API docs FAQ Sample Configurations supplied by various users Contribution Guide for developers looking to get involved An IRC channel for general chat/support/development (#hammerspoon on Libera) Google Group for support  나의 Hammerspoon init.lua:\ndo -- Reload Hammerspoon hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;r\u0026#39;, hs.reload) end do -- Launch or Focus Terminal hs.hotkey.bind({\u0026#39;cmd\u0026#39;}, \u0026#39;return\u0026#39;, function() hs.application.launchOrFocus(\u0026#39;Alacritty\u0026#39;) end) end do -- Window Hints hs.hints.hintChars = {\u0026#39;A\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;F\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;R\u0026#39;} hs.hotkey.bind({\u0026#39;shift\u0026#39;}, \u0026#39;tab\u0026#39;, hs.hints.windowHints) end do -- 윈도우창 크기 조절 local function moveToLeft() local win = hs.window.focusedWindow() local frame = win:frame() local screen = win:screen():frame() if frame.x == screen.x and frame.w == math.floor(screen.w / 2) then frame.w = screen.w / 3 elseif frame.x == screen.x and frame.w == math.floor(screen.w / 3) then frame.w = screen.w / 1.5 else frame.w = screen.w / 2 end frame.x = screen.x frame.y = screen.y frame.h = screen.h win:setFrame(frame) end local function moveToRight() local win = hs.window.focusedWindow() local frame = win:frame() local screen = win:screen():frame() if frame.x ~= screen.x and frame.w == math.floor(screen.w / 2) then frame.w = screen.w / 3 elseif frame.x ~= screen.x and frame.w == math.floor(screen.w / 3) then frame.w = screen.w / 1.5 else frame.w = screen.w / 2 end frame.x = screen.x + (screen.w - frame.w) frame.y = screen.y frame.h = screen.h win:setFrame(frame) end local function moveToTop() local win = hs.window.focusedWindow() local frame = win:frame() local screen = win:screen():frame() if frame.y == screen.y and frame.h == math.floor(screen.h / 2) then frame.h = screen.h / 3 elseif frame.y == screen.y and frame.h == math.floor(screen.h / 3) then frame.h = screen.h / 1.5 else frame.h = screen.h / 2 end frame.y = screen.y win:setFrame(frame) end local function moveToBottom() local win = hs.window.focusedWindow() local frame = win:frame() local screen = win:screen():frame() if frame.y ~= screen.y and frame.h == math.floor(screen.h / 2) then frame.h = screen.h / 3 elseif frame.y ~= screen.y and frame.h == math.floor(screen.h / 3) then frame.h = screen.h / 1.5 else frame.h = screen.h / 2 end frame.y = screen.y + (screen.h - frame.h) win:setFrame(frame) end local function maxWindow() local win = hs.window.focusedWindow() local frame = win:frame() local screen = win:screen():frame() frame.x = screen.x frame.y = screen.y frame.w = screen.w frame.h = screen.h win:setFrame(frame) end -- 키 맵핑 hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;left\u0026#39;, moveToLeft) hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;Right\u0026#39;, moveToRight) hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;Up\u0026#39;, moveToTop) hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;Down\u0026#39;, moveToBottom) hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;Down\u0026#39;, moveToBottom) hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;Return\u0026#39;, maxWindow) end -- do -- -- hs.hotkey.bind({\u0026#39;ctrl\u0026#39;, \u0026#39;option\u0026#39;, \u0026#39;cmd\u0026#39;}, \u0026#39;i\u0026#39;, function() -- local input_source = hs.keycodes.currentSourceID() -- print(input_source) -- end) -- end do -- Change Input Source :: 한영키 지정 local inputSource = { english = \u0026#34;com.apple.keylayout.ABC\u0026#34;, korean = \u0026#34;com.apple.inputmethod.Korean.2SetKorean\u0026#34;, } local function changeInput() local current = hs.keycodes.currentSourceID() local nextInput = nil if current == inputSource.english then nextInput = inputSource.korean else nextInput = inputSource.english end hs.keycodes.currentSourceID(nextInput) end hs.hotkey.bind({\u0026#39;shift\u0026#39;}, \u0026#39;space\u0026#39;, changeInput) hs.hotkey.bind({}, \u0026#39;f13\u0026#39;, changeInput) end do -- Esc키 눌렀을때 강제로 영문키로 변경 for Vim local inputEng = \u0026#39;com.apple.keylayout.ABC\u0026#39; local function escapeWithChangedInput() local input_source = hs.keycodes.currentSourceID() if not (input_source == inputEng) then hs.keycodes.currentSourceID(inputEng) end hs.eventtap.keyStroke({}, \u0026#39;escape\u0026#39;) end -- hs.hotkey.bind({\u0026#39;ctrl\u0026#39;}, \u0026#39;c\u0026#39;, escapeWithChangedInput) hs.hotkey.bind({}, \u0026#39;f14\u0026#39;, escapeWithChangedInput) end do -- Remapping Keys local FRemap = require(\u0026#39;foundation_remapping\u0026#39;) local remapper = FRemap.new() remapper:remap(\u0026#39;rcmd\u0026#39;, \u0026#39;f13\u0026#39;) remapper:remap(\u0026#39;capslock\u0026#39;, \u0026#39;f14\u0026#39;) remapper:register() end 마지막 Remmapping Keys 섹션을 보면 foundation_remapping plug-in을 불러 왔다. foundation_remapping 다운로드 받아 ~/.hammerspoon에 저장해 두자.\nSeeAlos  Hammerspoon Spoons Github page Sample Configurations johngrib 한글문서  ","permalink":"https://bynaki.github.io/posts/hammerspoon/","summary":"hammerspoon은 macOS에서만 돌아가는 자동화 툴이다. Lua를 내장하고 있다. 마음에 든다.  What is Hammerspoon? This is a tool for powerful automation of OS X. At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting engine.\nWhat gives Hammerspoon its power is a set of extensions that expose specific pieces of system functionality, to the user. With these, you can write Lua scripts to control many aspects of your OS X environment.","title":"Hammerspoon"},{"content":"Create a Hugo site using the beautiful Ananke theme.\n This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is recommended to have Git installed to run this tutorial.\nFor other approaches learning Hugo like book or a video tutorial refer to the external learning resources page.\n Step 1: Install Hugo  Homebrew and MacPorts, package managers for macOS, can be installed from brew.sh or macports.org respectively. See install if you are running Windows etc.\n brew install hugo # or port install hugo To verify your new install:\nhugo version Step 2: Create a New Site hugo new site quickstart The above will create a new Hugo site in a folder named quickstart.\nStep 3: Add a Theme See themes.gohugo.io for a list of themes to consider. This quickstart uses the beautiful Ananke theme.\nFirst, download the theme from GitHub and add it to your site’s themes directory:\ncd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke Then, add the theme to the site configuration:\necho theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml Step 4: Add Some Content You can manually create content files (for example as content/\u0026lt;CATEGORY\u0026gt;/\u0026lt;FILE\u0026gt;.\u0026lt;FORMAT\u0026gt;) and provide metadata in them, however you can use the new command to do a few things for you (like add title and date):\nhugo new posts/my-first-post.md Edit the newly created content file if you want, it will start with something like this:\n--- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  Drafts do not get deployed; once you finish a post, update the header of the post to say draft: false. More info here.\n 위 설정은 /archetypes/default.md와 연계된다. 만약, 자기만의 것을 설정하고 싶다면 default.md를 고치거나 아니면 새로운 파일로 하고 싶다면 (예: post.md라고 한다면) 파일을 생성하고 아래와 같이 하자.\nhugo new --kind post posts/my-first-post.md Step 5: Start the Hugo server Now, start the Hugo server with drafts enabled:\n▶ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop Navigate to your new site at http://localhost:1313/.\nFeel free to edit or add new content and simply refresh in browser to see changes quickly (You might need to force refresh in webbrowser, something like Ctrl-R usually works).\nStep 6: Customize the Theme Your new site already looks great, but you will want to tweak it a little before you release it to the public.\nSite Configuration Open up config.toml in a text editor:\nbaseURL = \u0026#34;https://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; theme = \u0026#34;ananke\u0026#34; Replace the title above with something more personal. Also, if you already have a domain ready, set the baseURL. Note that this value is not needed when running the local development server.\n Tip: Make the changes to the site configuration or any other file in your site while the Hugo server is running, and you will see the changes in the browser right away, though you may need to clear your cache.\n For theme specific configuration options, see the theme site.\nFor further theme customization, see Customize a Theme.\nStep 7: Build static pages It is simple. Just call:\nhugo -D Output will be in ./public/ directory by default (-d/--destination flag to change it, or set publishdir in the config file).\nSee Also  https://gohugo.io/getting-started/quick-start/ https://ialy1595.github.io/post/blog-construct-1/ https://golangkorea.github.io/series/hugo-introduction/ PaperMod Theme  ","permalink":"https://bynaki.github.io/posts/hugo.quick-start/","summary":"Create a Hugo site using the beautiful Ananke theme.\n This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is recommended to have Git installed to run this tutorial.\nFor other approaches learning Hugo like book or a video tutorial refer to the external learning resources page.\n Step 1: Install Hugo  Homebrew and MacPorts, package managers for macOS, can be installed from brew.","title":"Hugo :: Quick Start"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist  List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nLink Github\nImage   The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://bynaki.github.io/posts/markdown.syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown :: Syntax"},{"content":"About submodule.\nAdd Submodule 서브모듈 추가 하기\n$ git submodule add https://github.com/chaconinc/DbConnector 기본적으로 서브모듈은 프로젝트 저장소의 이름으로 디렉토리를 만든다. 예제에서는 DbConnector라는 이름으로 만든다. 명령의 마지막에 원하는 이름을 넣어 다른 디렉토리 이름으로 서브모듈을 추가할 수도 있다. 우선 .gitmodules 파일이 만들어졌다. 이 파일은 서브디렉토리와 하위 프로젝트 URL의 매핑 정보를 담은 설정파일이다.\n[submodule \u0026quot;DbConnector\u0026quot;] path = DbConnector url = https://github.com/chaconinc/DbConnector Submodule 포함한 프로젝트 Clone 서브모듈을 포함하는 프로젝트를 Clone 하는 예제를 살펴본다. 이런 프로젝트를 Clone 하면 기본적으로 서브모듈 디렉토리는 빈 디렉토리이다.\n$ git clone https://github.com/chaconinc/MainProject 분명히 DbConnector 디렉토리는 있지만 비어 있다. 서브모듈에 관련된 두 명령을 실행해야 완전히 Clone 과정이 끝난다. 먼저 git submodule init 명령을 실행하면 서브모듈 정보를 기반으로 로컬 환경설정 파일이 준비된다. 이후 git submodule update 명령으로 서브모듈의 리모트 저장소에서 데이터를 가져오고 서브모듈을 포함한 프로젝트의 현재 스냅샷에서 Checkout 해야 할 커밋 정보를 가져와서 서브모듈 프로젝트에 대한 Checkout을 한다.\n$ git submodule init $ git submodule update DbConnector 디렉토리는 마지막으로 커밋을 했던 상태로 복원된다.\n하지만, 같은 과정을 더 간단하게 실행하는 방법도 있다. 메인 프로젝트를 Clone 할 때 git clone 명령 뒤에 --recurse-submodules 옵션을 붙이면 서브모듈을 자동으로 초기화하고 업데이트한다.\n$ git clone --recurse-submodules https://github.com/chaconinc/MainProject Submodule 포함한 프로젝트 작업 서브모듈 디렉토리에서 Fetch 명령과 Merge 명령을 실행하지 않아도 git submodule update --remote 명령을 실행하면 Git이 알아서 서브모듈 프로젝트를 Fetch 하고 업데이트한다.\n$ git submodule update --remote DbConnector Submodule Push 서브모듈의 변경사항을 Push 하지 않은 채로 메인 프로젝트에서 커밋을 Push 하면 안 된다. 변경 사항을 Checkout 한 다른 사람은 서브모듈이 의존하는 코드를 어디서도 가져올 수 없는 상황이 돼 곤란해진다. 서브모듈의 변경사항은 우리의 로컬에만 있다.\n이런 불상사가 발생하지 않도록 하려면 메인 프로젝트를 Push 하기 전에 서브모듈을 모두 Push 했는지 검사하도록 Git에게 물어보면 된다. git push 명령에 --recurse-submodules 옵션을 주고 이 옵션의 값으로 check 나 on-demand 를 설정한다. check 는 간단히 서브모듈의 로컬 커밋이 Push 되지 않은 상태라면 현재의 `Push 명령도 실패하도록 하는 옵션이다.\n$ git push --recurse-submodules=check The following submodule paths contain changes that can not be found on any remote: DbConnector Please try git push --recurse-submodules=on-demand or cd to the path and use git push to push them to a remote. 예제에서 볼 수 있는 대로 이러한 상황에서 다음으로 무엇을 해야 하는지 Git은 도움을 준다. 가장 단순한 방법은 각 서브모듈 디렉토리로 가서 직접 일일이 Push를 해서 외부로 공유하고 나서 메인 프로젝트를 Push 하는 것이다. 이 옵션이 항상 적용되도록 하고 싶으면 git config push.recurseSubmodules check 명령으로 설정한다.\n옵션으로 설정할 수 있는 다른 값으로 on-demand 값이 있는데, 이 값으로 설정하면 Git이 Push를 대신 시도한다.\n$ git push --recurse-submodules=on-demand Pushing submodule \u0026#39;DbConnector\u0026#39; Counting objects: 9, done. Delta compression using up to 8 threads. Compressing objects: 100% (8/8), done. Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done. Total 9 (delta 3), reused 0 (delta 0) To https://github.com/chaconinc/DbConnector c75e92a..82d2ad3 stable -\u0026gt; stable Counting objects: 2, done. Delta compression using up to 8 threads. Compressing objects: 100% (2/2), done. Writing objects: 100% (2/2), 266 bytes | 0 bytes/s, done. Total 2 (delta 1), reused 0 (delta 0) To https://github.com/chaconinc/MainProject 3d6d338..9a377d1 master -\u0026gt; master 위에서 보듯이 Git이 메인 프로젝트를 Push 하기 전에 DbConnector 모듈로 들어가서 Push를 한다. 모종의 이유로 서브모듈 Push에 실패한다면 메인 프로젝트의 Push 또한 실패하게 된다. git config push.recurseSubmodules on-demand 명령으로 설정할 수 있다.\nSee Also  7.11 Git 도구 - 서브모듈  ","permalink":"https://bynaki.github.io/posts/git.submodule/","summary":"About submodule.\nAdd Submodule 서브모듈 추가 하기\n$ git submodule add https://github.com/chaconinc/DbConnector 기본적으로 서브모듈은 프로젝트 저장소의 이름으로 디렉토리를 만든다. 예제에서는 DbConnector라는 이름으로 만든다. 명령의 마지막에 원하는 이름을 넣어 다른 디렉토리 이름으로 서브모듈을 추가할 수도 있다. 우선 .gitmodules 파일이 만들어졌다. 이 파일은 서브디렉토리와 하위 프로젝트 URL의 매핑 정보를 담은 설정파일이다.\n[submodule \u0026quot;DbConnector\u0026quot;] path = DbConnector url = https://github.com/chaconinc/DbConnector Submodule 포함한 프로젝트 Clone 서브모듈을 포함하는 프로젝트를 Clone 하는 예제를 살펴본다. 이런 프로젝트를 Clone 하면 기본적으로 서브모듈 디렉토리는 빈 디렉토리이다.","title":"Git :: Submodule"},{"content":"Debugging tests with Visual Studio Code\nYou can debug your tests using Visual Studio Code.\nDebugging with the debug terminal You can use VS Code\u0026rsquo;s “JavaScript Debug Terminal” to automatically debug AVA run on the command-line.\n From the Command Palette (F1or command + shift + p/ control + shift + p), run Debug: Create JavaScript Debug Terminal Run npx ava in the terminal  Creating a launch configuration Alternatively you can create a launch configuration, which makes it easier to debug individual test files.\n Open a workspace for your project. In the sidebar click the Debug handle. Create a launch.json file. Select the Node.js environment. Add following to the configurations array and save changes:  { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Debug AVA test file\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/.bin/ava\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;${file}\u0026#34; ], \u0026#34;outputCapture\u0026#34;: \u0026#34;std\u0026#34;, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**/*.js\u0026#34; ] } Using the debugger Open the file(s) you want to debug. You can set breakpoints or use the debugger keyword.\nNow, with a test file open, from the Debug menu run the Debug AVA test file configuration.\nDebugging precompiled tests If you compile your test files into a different directory, and run the tests from that directory, the above configuration won\u0026rsquo;t work.\nAssuming the names of your test files are unique you could try the following configuration instead. This assumes the compile output is written to the build directory. Adjust as appropriate:\n{ \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Debug AVA test file\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/.bin/ava\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;build/**/${fileBasenameNoExtension}.*\u0026#34; ], \u0026#34;outputCapture\u0026#34;: \u0026#34;std\u0026#34;, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**/*.js\u0026#34; ] } Serial debugging By default AVA runs tests concurrently. This may complicate debugging. Instead make sure AVA runs only one test at a time.\nNote that, if your tests aren\u0026rsquo;t properly isolated, certain test failures may not appear when running the tests serially.\nIf you use the debug terminal make sure to invoke AVA with npx ava --serial.\nOr, if you\u0026rsquo;re using a launch configuration, add the --serial argument:\n{ \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Debug AVA test file\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/.bin/ava\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;--serial\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;outputCapture\u0026#34;: \u0026#34;std\u0026#34;, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**/*.js\u0026#34; ] } ","permalink":"https://bynaki.github.io/posts/ava.debugging-vscode/","summary":"Debugging tests with Visual Studio Code\nYou can debug your tests using Visual Studio Code.\nDebugging with the debug terminal You can use VS Code\u0026rsquo;s “JavaScript Debug Terminal” to automatically debug AVA run on the command-line.\n From the Command Palette (F1or command + shift + p/ control + shift + p), run Debug: Create JavaScript Debug Terminal Run npx ava in the terminal  Creating a launch configuration Alternatively you can create a launch configuration, which makes it easier to debug individual test files.","title":"Ava :: Debugging tests with Visual Studio Code"}]