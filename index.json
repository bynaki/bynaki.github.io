[{"content":"Create a Hugo site using the beautiful Ananke theme.\n This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is recommended to have Git installed to run this tutorial.\nFor other approaches learning Hugo like book or a video tutorial refer to the external learning resources page.\n Step 1: Install Hugo  Homebrew and MacPorts, package managers for macOS, can be installed from brew.sh or macports.org respectively. See install if you are running Windows etc.\n brew install hugo # or port install hugo To verify your new install:\nhugo version Step 2: Create a New Site hugo new site quickstart The above will create a new Hugo site in a folder named quickstart.\nStep 3: Add a Theme See themes.gohugo.io for a list of themes to consider. This quickstart uses the beautiful Ananke theme.\nFirst, download the theme from GitHub and add it to your site’s themes directory:\ncd quickstart git init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke Then, add the theme to the site configuration:\necho theme = \\\u0026#34;ananke\\\u0026#34; \u0026gt;\u0026gt; config.toml Step 4: Add Some Content You can manually create content files (for example as content/\u0026lt;CATEGORY\u0026gt;/\u0026lt;FILE\u0026gt;.\u0026lt;FORMAT\u0026gt;) and provide metadata in them, however you can use the new command to do a few things for you (like add title and date):\nhugo new posts/my-first-post.md Edit the newly created content file if you want, it will start with something like this:\n--- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  Drafts do not get deployed; once you finish a post, update the header of the post to say draft: false. More info here.\n 위 설정은 /archetypes/default.md와 연계된다. 만약, 자기만의 것을 설정하고 싶다면 default.md를 고치거나 아니면 새로운 파일로 하고 싶다면 (예: post.md라고 한다면) 파일을 생성하고 아래와 같이 하자.\nhugo new --kind post posts/my-first-post.md Step 5: Start the Hugo server Now, start the Hugo server with drafts enabled:\n▶ hugo server -D | EN +------------------+----+ Pages | 10 Paginator pages | 0 Non-page files | 0 Static files | 3 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Total in 11 ms Watching for changes in /Users/bep/quickstart/{content,data,layouts,static,themes} Watching for config changes in /Users/bep/quickstart/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop Navigate to your new site at http://localhost:1313/.\nFeel free to edit or add new content and simply refresh in browser to see changes quickly (You might need to force refresh in webbrowser, something like Ctrl-R usually works).\nStep 6: Customize the Theme Your new site already looks great, but you will want to tweak it a little before you release it to the public.\nSite Configuration Open up config.toml in a text editor:\nbaseURL = \u0026#34;https://example.org/\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; theme = \u0026#34;ananke\u0026#34; Replace the title above with something more personal. Also, if you already have a domain ready, set the baseURL. Note that this value is not needed when running the local development server.\n Tip: Make the changes to the site configuration or any other file in your site while the Hugo server is running, and you will see the changes in the browser right away, though you may need to clear your cache.\n For theme specific configuration options, see the theme site.\nFor further theme customization, see Customize a Theme.\nStep 7: Build static pages It is simple. Just call:\nhugo -D Output will be in ./public/ directory by default (-d/--destination flag to change it, or set publishdir in the config file).\nSee Also  https://gohugo.io/getting-started/quick-start/  ","permalink":"https://bynaki.github.io/posts/hugo.quick-start/","summary":"Create a Hugo site using the beautiful Ananke theme.\n This quick start uses macOS in the examples. For instructions about how to install Hugo on other operating systems, see install.\nIt is recommended to have Git installed to run this tutorial.\nFor other approaches learning Hugo like book or a video tutorial refer to the external learning resources page.\n Step 1: Install Hugo  Homebrew and MacPorts, package managers for macOS, can be installed from brew.","title":"Hugo :: Quick Start"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1 Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Italics Bold Code     italics bold code    Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist  List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Fruit  Apple Orange Banana   Dairy  Milk Cheese    Other Elements — abbr, sub, sup, kbd, mark GIFis a bitmap image format.\nH2O\nXn+ Yn= ZnPress CTRL+ALT+Deleteto end the session.\nMost salamandersare nocturnal, and hunt for insects, worms, and other small creatures.\nLink Github\n  The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://bynaki.github.io/posts/markdown.syntax/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown :: Syntax"},{"content":"About submodule.\nAdd Submodule 서브모듈 추가 하기\n$ git submodule add https://github.com/chaconinc/DbConnector 기본적으로 서브모듈은 프로젝트 저장소의 이름으로 디렉토리를 만든다. 예제에서는 DbConnector라는 이름으로 만든다. 명령의 마지막에 원하는 이름을 넣어 다른 디렉토리 이름으로 서브모듈을 추가할 수도 있다. 우선 .gitmodules 파일이 만들어졌다. 이 파일은 서브디렉토리와 하위 프로젝트 URL의 매핑 정보를 담은 설정파일이다.\n[submodule \u0026quot;DbConnector\u0026quot;] path = DbConnector url = https://github.com/chaconinc/DbConnector Submodule 포함한 프로젝트 Clone 서브모듈을 포함하는 프로젝트를 Clone 하는 예제를 살펴본다. 이런 프로젝트를 Clone 하면 기본적으로 서브모듈 디렉토리는 빈 디렉토리이다.\n$ git clone https://github.com/chaconinc/MainProject 분명히 DbConnector 디렉토리는 있지만 비어 있다. 서브모듈에 관련된 두 명령을 실행해야 완전히 Clone 과정이 끝난다. 먼저 git submodule init 명령을 실행하면 서브모듈 정보를 기반으로 로컬 환경설정 파일이 준비된다. 이후 git submodule update 명령으로 서브모듈의 리모트 저장소에서 데이터를 가져오고 서브모듈을 포함한 프로젝트의 현재 스냅샷에서 Checkout 해야 할 커밋 정보를 가져와서 서브모듈 프로젝트에 대한 Checkout을 한다.\n$ git submodule init $ git submodule update DbConnector 디렉토리는 마지막으로 커밋을 했던 상태로 복원된다.\n하지만, 같은 과정을 더 간단하게 실행하는 방법도 있다. 메인 프로젝트를 Clone 할 때 git clone 명령 뒤에 --recurse-submodules 옵션을 붙이면 서브모듈을 자동으로 초기화하고 업데이트한다.\n$ git clone --recurse-submodules https://github.com/chaconinc/MainProject Submodule 포함한 프로젝트 작업 서브모듈 디렉토리에서 Fetch 명령과 Merge 명령을 실행하지 않아도 git submodule update --remote 명령을 실행하면 Git이 알아서 서브모듈 프로젝트를 Fetch 하고 업데이트한다.\n$ git submodule update --remote DbConnector See Also  7.11 Git 도구 - 서브모듈  ","permalink":"https://bynaki.github.io/posts/git.submodule/","summary":"About submodule.\nAdd Submodule 서브모듈 추가 하기\n$ git submodule add https://github.com/chaconinc/DbConnector 기본적으로 서브모듈은 프로젝트 저장소의 이름으로 디렉토리를 만든다. 예제에서는 DbConnector라는 이름으로 만든다. 명령의 마지막에 원하는 이름을 넣어 다른 디렉토리 이름으로 서브모듈을 추가할 수도 있다. 우선 .gitmodules 파일이 만들어졌다. 이 파일은 서브디렉토리와 하위 프로젝트 URL의 매핑 정보를 담은 설정파일이다.\n[submodule \u0026quot;DbConnector\u0026quot;] path = DbConnector url = https://github.com/chaconinc/DbConnector Submodule 포함한 프로젝트 Clone 서브모듈을 포함하는 프로젝트를 Clone 하는 예제를 살펴본다. 이런 프로젝트를 Clone 하면 기본적으로 서브모듈 디렉토리는 빈 디렉토리이다.","title":"Git :: Submodule"},{"content":"Debugging tests with Visual Studio Code\nYou can debug your tests using Visual Studio Code.\nDebugging with the debug terminal You can use VS Code\u0026rsquo;s “JavaScript Debug Terminal” to automatically debug AVA run on the command-line.\n From the Command Palette (F1or command + shift + p/ control + shift + p), run Debug: Create JavaScript Debug Terminal Run npx ava in the terminal  Creating a launch configuration Alternatively you can create a launch configuration, which makes it easier to debug individual test files.\n Open a workspace for your project. In the sidebar click the Debug handle. Create a launch.json file. Select the Node.js environment. Add following to the configurations array and save changes:  { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Debug AVA test file\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/.bin/ava\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;${file}\u0026#34; ], \u0026#34;outputCapture\u0026#34;: \u0026#34;std\u0026#34;, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**/*.js\u0026#34; ] } Using the debugger Open the file(s) you want to debug. You can set breakpoints or use the debugger keyword.\nNow, with a test file open, from the Debug menu run the Debug AVA test file configuration.\nDebugging precompiled tests If you compile your test files into a different directory, and run the tests from that directory, the above configuration won\u0026rsquo;t work.\nAssuming the names of your test files are unique you could try the following configuration instead. This assumes the compile output is written to the build directory. Adjust as appropriate:\n{ \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Debug AVA test file\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/.bin/ava\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;build/**/${fileBasenameNoExtension}.*\u0026#34; ], \u0026#34;outputCapture\u0026#34;: \u0026#34;std\u0026#34;, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**/*.js\u0026#34; ] } Serial debugging By default AVA runs tests concurrently. This may complicate debugging. Instead make sure AVA runs only one test at a time.\nNote that, if your tests aren\u0026rsquo;t properly isolated, certain test failures may not appear when running the tests serially.\nIf you use the debug terminal make sure to invoke AVA with npx ava --serial.\nOr, if you\u0026rsquo;re using a launch configuration, add the --serial argument:\n{ \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Debug AVA test file\u0026#34;, \u0026#34;runtimeExecutable\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/.bin/ava\u0026#34;, \u0026#34;runtimeArgs\u0026#34;: [ \u0026#34;--serial\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;outputCapture\u0026#34;: \u0026#34;std\u0026#34;, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**/*.js\u0026#34; ] } ","permalink":"https://bynaki.github.io/posts/ava.debugging-vscode/","summary":"Debugging tests with Visual Studio Code\nYou can debug your tests using Visual Studio Code.\nDebugging with the debug terminal You can use VS Code\u0026rsquo;s “JavaScript Debug Terminal” to automatically debug AVA run on the command-line.\n From the Command Palette (F1or command + shift + p/ control + shift + p), run Debug: Create JavaScript Debug Terminal Run npx ava in the terminal  Creating a launch configuration Alternatively you can create a launch configuration, which makes it easier to debug individual test files.","title":"Ava :: Debugging tests with Visual Studio Code"}]